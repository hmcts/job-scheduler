server:
  port: 8484

management:
  security:
    enabled: ${MANAGEMENT_SECURITY_ENABLED:true}

idam:
  s2s-auth:
    useStub: false
    url: ${S2S_URL}
    secret: ${S2S_SECRET}
    microservice: ${REFORM_SERVICE_NAME:jobscheduler}

spring:
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${JOB_SCHEDULER_DB_HOST:job-scheduler-database}:${JOB_SCHEDULER_DB_PORT:5432}/${JOB_SCHEDULER_DB_NAME:jobscheduler}${JOB_SCHEDULER_DB_CONNECTION_OPTIONS:}
    username: ${JOB_SCHEDULER_DB_USERNAME:jobscheduler}
    password: ${JOB_SCHEDULER_DB_PASSWORD:}
    properties:
      charSet: UTF-8
    maxWaitForConnection: 2000
    minSize: 8
    maxSize: 32
    evictionInterval: 10000
    minIdleTime: 1 minute
    checkConnectionWhileIdle: true
    checkConnectionOnReturn: true
    removeAbandoned: true
    removeAbandonedTimeout: 60
    abandonWhenPercentageFull: 0
    testOnBorrow: true
    validationQuery: SELECT 1

quartzProperties:
  org.quartz:
    scheduler:
      instanceId: AUTO
    dataSource:
      jobscheduler:
        driver: org.postgresql.Driver
        URL: ${spring.datasource.url}
        user: ${spring.datasource.username}
        password: ${spring.datasource.password}
    jobStore:
      isClustered: true
      class: org.quartz.impl.jdbcjobstore.JobStoreTX
      driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
      dataSource: jobscheduler
    threadPool:
      class: org.quartz.simpl.SimpleThreadPool
      threadCount: 8

retryPolicy:
  maxNumberOfJobExecutions: ${MAX_NUMBER_OF_JOB_EXECUTIONS:5}
  delayBetweenAttemptsInMs: ${DELAY_BETWEEN_JOB_ATTEMPTS_MS:15000}
